const e={metadata:{},filesToCache:[],indexHTML:"",importPWA:async()=>{const n=document.getElementById("loadFile").files[0];if(!n||"application/zip"!==n.type)return document.getElementById("exportPWA").classList="hidden",void alert("Please select a valid zip file.");try{document.getElementById("exportPWA").classList="mt-6 px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white font-bold rounded-lg shadow-md";const{metadata:t,zipContents:a}=await e.extractMetadataAndFilesToCache(n);Object.assign(e.metadata,t),e.zipContents=a}catch(e){console.error("Error importing PWA:",e)}},extractMetadataAndFilesToCache:async n=>{try{const t=await new Promise(((e,t)=>{const a=new FileReader;a.onload=()=>e(a.result),a.onerror=t,a.readAsArrayBuffer(n)})),a=await JSZip.loadAsync(t);let i=await a.file("index.html").async("text");const s=/<link\s+rel="manifest"\s+href="([^"]+)"\s*\/?>/i,o=(i.match(s),/<\/title>/i),r=i.search(o);-1!==r?i=i.slice(0,r+8)+'\n    <link rel="manifest" href="manifest.json">'+i.slice(r+8):console.error("Closing title tag not found in index.html");const l="\n    <script src=\"https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js\"><\/script>\n    <script>\n      // service worker for progressive web app\n      if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.register('./sw.js').then(reg => {\n          reg.addEventListener('updatefound', () => {\n            const newSW = reg.installing;\n            newSW.addEventListener('statechange', () => {\n              if (newSW.state === 'installed' && navigator.serviceWorker.controller) {\n                // Notify the user and reload if they confirm\n                if (confirm('A new version is available. Reload now?')) {\n                  window.location.reload();\n                }\n              }\n            });\n          });\n        });\n    \n        // Ensure immediate activation of a new service worker\n        navigator.serviceWorker.ready.then(registration => {\n          registration.active.postMessage({ type: 'SKIP_WAITING' });\n        });\n      }\n    <\/script>";i=i.replace(/<\/body>/i,`${l}\n  </body>`),e.indexHTML=i;const c=/<meta\s+name="application-name"\s+content="([^"]+)"\s*\/?>/i,d=/<title>([^<]+)<\/title>/i,p=/<meta\s+name="description"\s+content="([^"]+)"\s*\/?>/i,m=i.match(c),g=i.match(d),u=i.match(p),h={};h.appName=m?m[1]:prompt("Enter the Application Name:"),h.appTitle=g?g[1]:prompt("Enter the Application Title:"),h.appDesc=u?u[1]:prompt("Enter the Application Description:");const f=Object.values(a.files).filter((e=>null!=e)).map((e=>({path:e.name,content:e._data})));return e.filesToCache=f,{metadata:h,indexHtml:i}}catch(e){return console.error("Error extracting metadata and files to cache:",e),{metadata:{},indexHtml:""}}},convertToPWA:()=>{const n=e.generateServiceWorker(e.metadata,e.filesToCache);e.downloadPWA(n,e.filesToCache)},generateServiceWorker:(e,n)=>{const t=e.appName||"Your App Name";e.appTitle,e.appDesc;let a=[];n.forEach((e=>{a.push(`./${e.path}`)}));return`// Import Workbox\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js');\n\nconst { registerRoute } = workbox.routing;\nconst { NetworkFirst, StaleWhileRevalidate, CacheFirst } = workbox.strategies;\nconst { CacheableResponsePlugin } = workbox.cacheableResponse;\nconst { ExpirationPlugin } = workbox.expiration;\nconst { clientsClaim, skipWaiting } = workbox.core;\n\n// Define cache name dynamically based on the project name\nconst cacheName = '${t}-cache';\n\n// Force update when a new service worker is available\nself.addEventListener('install', (event) => {\n  self.skipWaiting(); // Immediately apply new service worker\n});\n\n// Clear old caches when activating a new service worker\nself.addEventListener('activate', async (event) => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames\n          .filter(name => name !== cacheName) // Keep only the latest cache\n          .map(name => caches.delete(name)) // Delete old caches\n      );\n    })\n  );\n  clientsClaim(); // Take control of all open clients\n});\n\n// Use Network First for scripts, styles, and documents (ensures updates)\nregisterRoute(\n  ({ request }) => request.destination === 'script' || request.destination === 'style' || request.destination === 'document',\n  new NetworkFirst({\n    cacheName: cacheName,\n    plugins: [\n      new CacheableResponsePlugin({\n        statuses: [0, 200],\n      }),\n    ],\n  })\n);\n\n// Cache images, fonts, audio, and video for performance\nregisterRoute(\n  ({ request }) =>\n    request.destination === 'image' || request.destination === 'font' ||\n    request.destination === 'audio' || request.destination === 'video',\n  new CacheFirst({\n    cacheName: cacheName,\n    plugins: [\n      new ExpirationPlugin({\n        maxEntries: 50, // Limit stored assets\n        maxAgeSeconds: 7 * 24 * 60 * 60, // Cache for 7 days\n      }),\n    ],\n  })\n);\n\n// Listen for messages to skip waiting and apply new updates\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n});`},downloadPWA:async n=>{try{const t=document.getElementById("loadFile").files[0];if(!t)return void alert("Please select a zip file first.");const a=new FileReader;a.onload=function(t){const a=new JSZip;a.loadAsync(t.target.result).then((function(t){a.file("sw.js",n);const i=`{\n    "theme_color":      "hsl(207, 31%, 11%)",\n    "background_color": "hsl(207, 31%, 11%)",\n    "display":          "standalone",\n    "start_url":        "./index.html",\n    "lang":             "en-US",\n    "name":             "${e.metadata.appName||"Your App Name"}",\n    "short_name":       "${e.metadata.appName||"Your App Name"}",\n    "description" :     "${e.metadata.appDesc||"Your App Description"}",\n    "icons": [\n        {\n            "src":     "./imgs/icon-192x192.png",\n            "sizes":   "192x192",\n            "type":    "image/png",\n            "purpose": "any"\n        },\n        {\n            "src":     "./imgs/icon-256x256.png",\n            "sizes":   "256x256",\n            "type":    "image/png",\n            "purpose": "any"\n        },\n        {\n            "src":     "./imgs/icon-384x384.png",\n            "sizes":   "384x384",\n            "type":    "image/png",\n            "purpose": "any"\n        },\n        {\n            "src":     "./imgs/icon-512x512.png",\n            "sizes":   "512x512",\n            "type":    "image/png",\n            "purpose": "maskable"\n        }\n    ]\n}`;a.file("manifest.json",i),a.file("index.html",e.indexHTML);const s=document.getElementById("logo").src;s.split(",");let o,r=s.substring(11,s.indexOf(";base64"));"image/png"===r&&(a.file("imgs/logo.png",logo.src.split("base64,")[1],{base64:!0}),o="png"),"image/jpeg"===r&&(a.file("imgs/logo.jpeg",logo.src.split("base64,")[1],{base64:!0}),o="jpeg"),"image/svg+xml"===r&&(a.file("imgs/logo.svg",logo.src.split("base64,")[1],{base64:!0}),o="svg"),a.file("imgs/icon-192x192.png",document.querySelectorAll("[data-image]")[0].src.split("base64,")[1],{base64:!0}),a.file("imgs/icon-256x256.png",document.querySelectorAll("[data-image]")[1].src.split("base64,")[1],{base64:!0}),a.file("imgs/icon-384x384.png",document.querySelectorAll("[data-image]")[2].src.split("base64,")[1],{base64:!0}),a.file("imgs/icon-512x512.png",document.querySelectorAll("[data-image]")[3].src.split("base64,")[1],{base64:!0}),a.file("imgs/logo.png",document.querySelectorAll("[data-image]")[4].src.split("base64,")[1],{base64:!0}),a.generateAsync({type:"blob"}).then((function(n){saveAs(n,`${e.metadata.appName||"appName"}-pwa.zip`)}))}))},a.readAsArrayBuffer(t)}catch(e){console.error("Error generating and downloading PWA:",e)}},validateFile:()=>{const n=document.getElementById("loadFile"),t=n.files[0];if(t&&"application/zip"!==t.type)return alert("Please select a valid zip file."),void(n.value="");e.importPWA()},init:()=>{document.getElementById("loadFile").onchange=()=>{e.validateFile()},document.getElementById("exportPWA").onclick=()=>{e.convertToPWA()};let n=(e,n)=>{let t=new Image;t.src=e,t.onload=function(){let e=document.createElement("canvas");e.width=n,e.height=n;let t=e.getContext("2d");t.clearRect(0,0,n,n),t.drawImage(this,0,0,n,n);let a=e.toDataURL("image/png"),i=document.createElement("img");i.classList.add("hidden"),i.setAttribute("data-image",""),i.src=a,document.body.appendChild(i)}};importlogo.onchange=()=>{let e=new FileReader;e.onload=e=>{logo.src=e.target.result,document.querySelector("[data-image]")&&document.querySelectorAll("[data-image]").forEach(((e,n)=>{e.remove()}));let t=["192","256","384","512",logo.width];for(let e of t)n(logo.src,e)},e.readAsDataURL(importlogo.files[0])};let t=["192","256","384","512",logo.width];for(let e of t)n(logo.src,e)}};window.FileReader||alert("File API & FileReader API not supported!"),e.init();
